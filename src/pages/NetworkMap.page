<apex:page showHeader="false" controller="NetworkMapController" standardStylesheets="false" docType="html-5.0">
<html ng-app="MyApp">
<head>

    <title>Network Map</title>
    
    <apex:includeScript value="{!URLFOR($Resource.lightning)}/angular.min.js" />
    <script async = "defer" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDykId3k_x8d-5TtPUbVLYbTpfa1NVSM7w&callback=initMap"
    type="text/javascript"></script>
    <apex:includeScript value="{!URLFOR($Resource.lightning)}/ContractDeployerApp.js" />
    <script>
        var resourcePath = "{!URLFOR($Resource.lightning)}";
        resourcePath = resourcePath + '/';
        myApp.value('resourcePath', resourcePath);
    </script>
    <apex:includeScript value="{!URLFOR($Resource.lightning)}/components.js" />
    <apex:stylesheet value="{!URLFOR($Resource.lightning)}/slds.css"/>
    <meta name="viewport" content="initial-scale=1.0" />
    <meta charset="utf-8" />
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #bottom_scrollview {
        position: absolute;
        padding-left: 20px;
        padding-right: 20px;
        bottom: 0px;
        left: 0px;
        right: 0px;
        height: 0px;
        overflow: scroll;
        background-color: gray;
        opacity: 0.5;
      }
      #inner_scroll {
        height: 100%;
        width: 300%;
        display: flex;
        flex-direction: row;
        position: relative;
      }
    </style>
    
        <script>
    
      function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
          
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
          
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      }
    
    
      var points = [];
      
      
      var url = new URL('https://maps.googleapis.com/maps/api/geocode/json');
      var API_KEY = 'AIzaSyDykId3k_x8d-5TtPUbVLYbTpfa1NVSM7w'; // switch to custom protected metadata type
    
      async function lookupLatLong(location){
          let params = {
          address: `${location.city}`,
          key: API_KEY,
          region: location.country.toLowerCase()
        }
    
    
      url.search = new URLSearchParams(params);

      const response = await fetch(url);
        let status = await response.status;
        if(status === 200) {
            let locations = await response.json();
        return locations.results[0].geometry.location;
        }
        else {
        return response.statusText;
        }
    }

    
    async function nodesLatLong(uniqueLocations){
    
        const locMap = new Map();
    
        for(let i in uniqueLocations){
        let tempLatLong = await lookupLatLong(uniqueLocations[i]);
            locMap.set(
        `${uniqueLocations[i].city}${uniqueLocations[i].country}`, 
        {
            lat: tempLatLong.lat, 
            lng: tempLatLong.lng
        } 
       )
     }
    return locMap;
}

      var map;
    
      function populateMap() {
        var lineSymbol = {
          path: 'M 0,-1 0,1',
          strokeColor: '#FF0000',
          strokeOpacity: 1,
          scale: 4
        };
        points.forEach((p, index) => {
          var uluru = {lat: p.lat, lng: p.lng};
          var marker = new google.maps.Marker({
            position: uluru,
            animation: google.maps.Animation.DROP,
            map: map
          });
          var innerScroll = document.getElementById('inner_scroll')
          var addedBox = document.createElement('div')
          addedBox.style.height = '50%';
          addedBox.style.width = '200px';
          addedBox.style.marginLeft = '20px';
          addedBox.style.marginRight = '20px';
          addedBox.style.marginTop = '10px';
          addedBox.style.borderWidth = '2px';
          addedBox.style.borderColor = 'red';
          addedBox.style.borderStyle = 'solid';
          //innerScroll.appendChild(addedBox)
          if (index > 0) {
            p1 = {lat: points[index - 1].lat, lng: points[index - 1].lng}
            p2 = {lat: p.lat, lng: p.lng}
            var line = new google.maps.Polyline({
              path: [p1, p2],
              strokeOpacity: 0,
              icons: [{
                icon: lineSymbol,
                offset: '0',
                repeat: '20px'
              }],
              map: map
            });
          }
        })
        var theScrollView = document.getElementById('bottom_scrollview')
        theScrollView.style.height = '200px'
      }
      
      
      function getNodes() {
          
          return new Promise((resolve,reject)=>{
             Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.NetworkMapController.getNodes}',
            function(result, event){
                console.log('result:'+result);
                if (event.status) {
                   resolve(result);
                } else if (event.type === 'exception') {
                   resolve(undefined)
                } else {
                   resolve(undefined) 
                }
            }, 
            {escape: true}
        );
          
      });
      }
      var mapOptions = {
          center: {lat: 41.7749, lng: 2.17},
          zoom: 3,
          maxZoom: 10,
          minZoom: 2,
          streetViewControl: false,
          mapTypeControl: false,
          styles: [
            {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
            {
              featureType: 'administrative.locality',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'geometry',
              stylers: [{color: '#263c3f'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'labels.text.fill',
              stylers: [{color: '#6b9a76'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry',
              stylers: [{color: '#38414e'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry.stroke',
              stylers: [{color: '#212a37'}]
            },
            {
              featureType: 'road',
              elementType: 'labels.text.fill',
              stylers: [{color: '#9ca5b3'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry',
              stylers: [{color: '#746855'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry.stroke',
              stylers: [{color: '#1f2835'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'labels.text.fill',
              stylers: [{color: '#f3d19c'}]
            },
            {
              featureType: 'transit',
              elementType: 'geometry',
              stylers: [{color: '#2f3948'}]
            },
            {
              featureType: 'transit.station',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'water',
              elementType: 'geometry',
              stylers: [{color: '#17263c'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.fill',
              stylers: [{color: '#515c6d'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.stroke',
              stylers: [{color: '#17263c'}]
            }
          ]
        };
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), mapOptions);
        var addedCityMap = {};
        getNodes().then((nodes)=>{
            var count = 1;
            for(var node of nodes){
                var nodeKey = node.nodeKey;
                var parties = node.parties[0];
                var partyName = parties.name;
                var partyKey = parties.key;
                var addresses = node.addresses[0];
                var host = addresses.host;
                var port = addresses.port;
                var partyName = parties.name.split(', ')[0].split('=')[1];
                var partyLocation = parties.name.split(', ')[1].split('=')[1];
                var partyCountry = parties.name.split(', ')[2].split('=')[1];
                
                addMarker(partyLocation, '<b>Node Key :</b>'+nodeKey + '<br>'+ '<b>Organisation:</b>'+partyName+ '<br>'+ '<b>Location:</b>'+partyLocation+'<br><b>Country:</b>'+partyCountry,count,addedCityMap[partyLocation]);
                count++;
                addedCityMap[partyLocation] = true;
            }
        });
        
        var addMarker = function(address, tooltip,count,exist){
            
            var geocoder = new google.maps.Geocoder();
             
              geocoder.geocode({
                  'address': address
                }, function(results, status) {
                  if (status == google.maps.GeocoderStatus.OK) {
                    if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
                      map.setCenter(results[0].geometry.location);
            
                      var infowindow = new google.maps.InfoWindow({
                        content: tooltip,
                        size: new google.maps.Size(499, 50)
                      });
            
                      var marker = new google.maps.Marker({
                        position:new google.maps.LatLng( results[0].geometry.location.lat() + (exist?0.01:0), results[0].geometry.location.lng() + (exist?0.01:0)),// results[0].geometry.location,
                        map: map,
                        title: address,
                        icon : 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld='+count+'|FE6256|000000'
                      });
                      google.maps.event.addListener(marker, 'click', function() {
                        infowindow.open(map, marker);
                      });
            
                    } else {
                      alert("No results found");
                    }
                  } else {
                    alert("Geocode was not successful for the following reason: " + status);
                  }
                });
        }
        
        
        // setTimeout(() => {
        //   populateMap()
        //  }, 1000)
      }
    </script>
    
    </head>
    <body>
   <div class="slds-page-header">
  <div class="slds-media">
    <div class="slds-media__figure">
      <span class="slds-icon_container slds-icon-action-refresh slds-icon_container--circle" title="DSOA Network Map">
        <svg class="slds-icon" aria-hidden="true">
          <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.lightning)}/assets/icons/custom-sprite/svg/symbols.svg#custom57"></use>
        </svg>
      </span>
    </div>
    <div class="slds-media__body">
      <h1 class="slds-page-header__title slds-truncate slds-align-middle" title="Smart Contract Deployer">{!$Label.Network_Map}</h1>
        <br/>
        <p><strong>{!$Label.Compatibility_Zone}:   </strong> 000028
            <br/>
            <strong>{!$Label.Business_Network_Operator}:   </strong> Dapps Inc.
            <br/>
            <strong>{!$Label.Version}:   </strong>Corda 4.0
      </p>
    </div>
  </div>
     <label class="slds-form-element__label" for="combobox-id-1"></label>
    <div class="slds-form-element__control" style="width:428px">
      <div class="slds-combobox_container">
        <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox" role="combobox">
          <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
            <input type="text" class="slds-input slds-combobox__input" id="combobox-id-1" aria-autocomplete="list" aria-controls="listbox-id-1" autocomplete="off" role="textbox" placeholder="{!$Label.Search_Network_Map}..." />
            <span class="slds-icon_container slds-icon-utility-search slds-input__icon slds-input__icon_right">
              <svg class="slds-icon slds-icon slds-icon_x-small slds-icon-text-default" aria-hidden="true">
                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.dsoa__lightning)}/assets/icons/utility-sprite/svg/symbols.svg#search" />
              </svg>
            </span>
          </div>
        </div>
      </div>
    </div>
</div>
<div id="map"></div>
    <div id="bottom_scrollview">
    </div>

    </body>
    
            <div style="height: 180px;">
  <div class="slds-docked-form-footer" style="padding-left:8px">
  </div>
</div>
    </html>    
    
</apex:page>